package Windows;

/**
 *
 * @author stheo, Alexandra
 */

import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import DB.Connector;
import DB.WeatherData;
import javax.swing.table.DefaultTableModel;
import java.lang.NullPointerException;


public class SearchHistory extends javax.swing.JDialog {

    /**
     * Creates new form MealCategoriesForm
     */
    public SearchHistory() {
        initComponents();
        setLocationRelativeTo(null);

        jListCities.setEnabled(false);
        jListDates.setEnabled(false);

        List<String> cities = Connector.retreiveCities();
        DefaultListModel<String> citiesList = new DefaultListModel<>();

        for (String city : cities) {
            citiesList.addElement(city);
        }
        jListCities.setModel(citiesList);
        jListCities.setEnabled(true);

        pack();
        setLocationRelativeTo(null);
        setModal(true);
        
    }
    
    // creates/refreshes the last entry table
    public void refreshTable(String cityName){
        try{
        WeatherData w = Connector.retrieveLastEntry(cityName);
        //column Names
        String cols[] = {"date", 
                         "tempC",
                         "humidity",
                         "weatherDesc",
                         "windspeedKmph",
                         "uvIndex"};


        //getting the values from weatherdata
        String data[][] = {{
            w.getWeatherDate(),
            String.valueOf(w.getTemperature()),
            String.valueOf(w.getHumidity()),
            w.getWeatherDesc(),
            String.valueOf(w.getWindspeed()),
            String.valueOf(w.getUvIndex())
        }};

        // recreating the table
        DefaultTableModel model = new DefaultTableModel(data, cols){
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make the cell in the first column (Date) uneditable
                return column != 0;
            }
        };

        jTableLastEntry.setModel(model);
        }
        catch(java.lang.NullPointerException e){
            System.out.println(e);
        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCities = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDates = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableLastEntry = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Λίστα Πόλεων");

        jLabel1.setText("Πόλεις");

        jListCities.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListCities.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListCitiesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListCities);

        jLabel2.setText("Ημερομηνίες");

        jListDates.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDatesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListDates);

        jButton1.setText("Διαγραφή Πόλης");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonSave.setText("Αποθήκευση Αλλαγών");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jTableLastEntry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "date", "tempC", "humidity", "weatherDesc", "windSpeedKmph", "uvIndex"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableLastEntry);

        jLabel3.setText("Τελευταία Καταχώρηση:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(312, 312, 312))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jButtonSave))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButtonSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListCitiesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListCitiesValueChanged
        if (!evt.getValueIsAdjusting()) {
            jListDates.setEnabled(false);
            List<String> datesPerCity = Connector.retreiveDates(jListCities.getSelectedValue());
            DefaultListModel<String> datesPerCityList = new DefaultListModel<>();

            for (String datePerCity : datesPerCity) {
                datesPerCityList.addElement(datePerCity);
            }
            jListDates.setModel(datesPerCityList);
            jListDates.setEnabled(true);
            
            // change the table values
            refreshTable(jListCities.getSelectedValue());
        }
    }//GEN-LAST:event_jListCitiesValueChanged

    private void jListDatesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDatesValueChanged
        if (!evt.getValueIsAdjusting() && jListDates.isEnabled()) {
           
        }
    }//GEN-LAST:event_jListDatesValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        // Get the selected city from the jListCities component.
        String selectedCity = jListCities.getSelectedValue();
    
        // Check if a city is selected.
        if (selectedCity != null) {
            //confirmation dialog
            int option = JOptionPane.showConfirmDialog(this,
                    "Διαγραφή "+selectedCity+" ?", "Επιβεβαίωση Διαγραφής",
                    JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                // Remove the selected city from the list.
                DefaultListModel<String> model = (DefaultListModel<String>) jListCities.getModel();
                model.removeElement(selectedCity);
        
                //DELETE the city from DB
                Connector.deleteCityCount(selectedCity); 
                Connector.deleteRecord(selectedCity); 
			}
		} else {
			// Show a message if no city is selected.
        JOptionPane.showMessageDialog(this, 
			"Επιλέξτε πόλη για διαγραφή", 
			"Δεν έχει επιλεγεί πόλη", JOptionPane.INFORMATION_MESSAGE);	
		}
    }//GEN-LAST:event_jButton1ActionPerformed

    
    // button for last entry update confirmation
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // Get the selected city from the jListCities component.
        String selectedCity = jListCities.getSelectedValue();
    
        // Check if a city is selected.
        if (selectedCity != null) {
            //confirmation dialog
            int option = JOptionPane.showConfirmDialog(this,
                    "Ενημέρωση τελευταίας καταχώρησης για πόλη: "+selectedCity+" ?", "Επιβεβαίωση Ενημέρωσης",
                    JOptionPane.YES_NO_OPTION);
            
            
            if (option == JOptionPane.YES_OPTION) {
                try{
                // update record
                Connector.editRecord(selectedCity,
                                     Integer.valueOf((String) jTableLastEntry.getModel().getValueAt(0,1)),
                                    Integer.valueOf((String) jTableLastEntry.getModel().getValueAt(0,2)),
                                    Integer.valueOf((String) jTableLastEntry.getModel().getValueAt(0,4)),
                                    Integer.valueOf((String) jTableLastEntry.getModel().getValueAt(0,5)),
                                    (String) jTableLastEntry.getModel().getValueAt(0,3)
                                    );
                JOptionPane.showMessageDialog(this, 
                            "Ενημέρωση Επιτυχής!", 
                            "Επιτυχία", JOptionPane.INFORMATION_MESSAGE);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this, 
                            "Αποτυχία Ενημέρωσης!", 
                            "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
                    
                }
            }
	}
        // Show a message if no city is selected.
        else {  
            JOptionPane.showMessageDialog(this, 
                            "Επιλέξτε πόλη!", 
                            "Δεν έχει επιλεγεί πόλη", JOptionPane.INFORMATION_MESSAGE);	
		}
    }//GEN-LAST:event_jButtonSaveActionPerformed
    
    
        
    
    /**
     * @param args the command line arguments
     */
    public static void showSearchHistory() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jListCities;
    private javax.swing.JList<String> jListDates;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableLastEntry;
    // End of variables declaration//GEN-END:variables
}
